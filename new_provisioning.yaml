---
- hosts: localhost
  connection: local
  gather_facts: no
  vars_files:
      - variable.yaml
      - static_variable.yaml
  vars:
    initiator: []
    portdetails: []
  tasks:
  - name: initiator details
    uri:
      url: "{{ unisphere_url }}/univmax/restapi/90/sloprovisioning/symmetrix/{{ symmetrixId }}/initiator?alias=<like>{{ hostname }}"
      method: GET
      validate_certs: no
      user: "{{ Username }}"
      password: "{{ Password }}"
      force_basic_auth: yes
      status_code: 201,200
    register: initiator_details
  - name: output of initiator_details
    debug:
      msg: "{{ initiator_details.json.initiatorId }}"

  - name: collecting all the initiator
    shell: echo "{{ item }}" | awk -F ":" '{ print $3}'
    register: initiatorgroup
    with_items:
      - "{{ initiator_details.json.initiatorId }}"
  - name: output of initiator
    debug:
      msg: "{{ initiatorgroup.results|map(attribute='stdout_lines')|list }}"

  - name: testing the list
    set_fact:
      initiator: "{{ initiator }} + [ '{{ item }}' ]"
    with_items: "{{ initiatorgroup.results|map(attribute='stdout_lines')|list }}"
  - name: print initiator
    debug: var=initiator
  - name: creating host group
    uri:
      url: "{{ unisphere_url }}/univmax/restapi/90/sloprovisioning/symmetrix/{{ symmetrixId }}/host"
      method: POST
      validate_certs: no
      user: "{{ Username }}"
      password: "{{ Password }}"
      force_basic_auth: yes
      status_code: 201,200
      body_format: json
      body:
        {
        "hostId": "{{ hostId }}",
       }
    register: new_hostgroup
  - debug:
        msg: "{{ new_hostgroup }}"

  - name: add initiator to host group
    ignore_errors: yes
    uri:
      url: "{{ unisphere_url }}/univmax/restapi/90/sloprovisioning/symmetrix/{{ symmetrixId }}/host/{{ hostId }}"
      method: PUT
      validate_certs: no
      user: smc
      password: "{{ Password }}"
      force_basic_auth: yes
      status_code: 201,200
      body_format: json
      body:
        {
         "editHostActionParam": {
         "addInitiatorParam": {
         "initiator": [
          "{{ item }}"
         ]
         }
        }
      }
    register: new_hostgroup
    with_items:
      - "{{ initiator }}"
  - debug:
        msg: "{{ new_hostgroup }}"

  
  - name: volume creation for an storage group
    uri:
      url: "{{ unisphere_url }}/univmax/restapi/90/sloprovisioning/symmetrix/{{ symmetrixId }}/storagegroup"
      method: POST
      validate_certs: no
      user: "{{ Username }}"
      password: "{{ Password }}"
      force_basic_auth: yes
      status_code: 201,200
      body_format: json
      body:
        {
          "srpId": "{{ srpId }}",
          "storageGroupId": "{{ storageGroupId }}",
          "emulation": "FBA",
          "sloBasedStorageGroupParam": [
          {
            "noCompression": false,
            "num_of_vols": "{{ num_of_vols }}",
            "sloId": "{{ sloId }}",
            "volumeAttribute": {
            "volume_size": "{{ volume_size }}",
            "capacityUnit": "GB"
           }
          }
          ]
        }
    register: volume_creation
  - debug:
        msg="{{ volume_creation }}"



  - name: collecting all the port
    shell: echo "{{ item }}" | cut -d ":" -f1,2
    register: port
    with_items:
      - "{{ initiator_details.json.initiatorId }}"

  - name: output of port pattern
    debug:
      msg: "{{ port.results|map(attribute='stdout_lines')|list }}"

  - name: testing the list
    set_fact:
      portdetails: "{{ portdetails }} + [ '{{ item }}' ]"
    with_items: "{{ port.results|map(attribute='stdout_lines')|list }}"

  - name: print port
    debug: var=portdetails

  - name: calculating number of dir port
    shell: echo "{{ portdetails }}" | wc -w
    register: dirport_count

  - name: print count
    debug:
      msg: "{{ dirport_count.stdout }}"

  - name: getting first director port
    shell: echo "{{ portdetails[0] }}"
    register: portname

  - name: print portname
    debug:
      msg: "{{ portname.stdout }}"


  - name: port details
    uri:
      url: "{{ unisphere_url }}/univmax/restapi/90/sloprovisioning/symmetrix/{{ symmetrixId }}/portgroup?num_of_ports={{ dirport_count.stdout }}&dir_port={{ portname.stdout }}"
      method: GET
      validate_certs: no
      user: "{{ Username }}"
      password: "{{ Password }}"
      force_basic_auth: yes
      status_code: 201,200
    register: portgroup_details
  - name: output of port_details
    debug:
      msg: "{{ portgroup_details.json.portGroupId }}"
  

  - name: creating srdf replication
    uri:
      url: "{{ unisphere_url }}/univmax/restapi/90/replication/symmetrix/{{ symmetrixId }}/storagegroup/{{ storageGroupId }}/rdf_group"
      method: POST
      validate_certs: no
      user: "{{ Username }}"
      password: "{{ Password }}"
      force_basic_auth: yes
      status_code: 201,200
      body_format: json
      body:
        {
         "replicationMode": "Synchronous",
         "remoteSymmId": "{{ remoteSymmId }}",
         "remoteStorageGroupName": "{{ remote_storage_group }}",
         "rdfgNumber": 30 #need to be changed
        }
    register: srdf_info
  - debug:
        msg: "{{ srdf_info }}"
 
  - name: establishing sync
    uri:
      url: "{{ unisphere_url }}/univmax/restapi/90/replication/symmetrix/{{ remoteSymmId }}/storagegroup/{{ remote_storage_group }}/rdf_group/30"
      method: PUT
      validate_certs: no
      user: "{{ Username }}"
      password: "{{ Password }}"
      force_basic_auth: yes
      status_code: 201,200
      body_format: json
      body:
        {
        "action": "Establish"
        }
    register: srdf_establish
  - debug:
        msg: "{{ srdf_establish }}"
      
  - name: Maskingview creation
    uri:
      url: "{{ unisphere_url }}/univmax/restapi/90/sloprovisioning/symmetrix/{{ symmetrixId }}/maskingview"
      method: POST
      validate_certs: no
      user: "{{ Username }}"
      password: "{{ Password }}"
      force_basic_auth: yes
      status_code: 201,200
      body_format: json
      body:
        {
          "portGroupSelection": {
          "useExistingPortGroupParam": {
          "portGroupId": "{{ portgroup }}" #need to change to {{ portgroup_details.json.portGroupId }}
        }
        },
          "maskingViewId": "{{ maskingViewId }}",
          "hostOrHostGroupSelection": {
          "useExistingHostGroupParam": {
          "hostGroupId": "{{ hostId }}"
        }
        },
          "storageGroupSelection": {
          "useExistingStorageGroupParam": {
          "storageGroupId": "{{ storageGroupId }}"
        }
        }
        }
    register: masking_view
  - debug:
        msg="{{ masking_view }}"  





